#!/bin/bash

###########################################################
# mtxbatch - Move (or swap) many tapes in a single command
#
# @author Nathan Collins, npcollins/gmail/com
###########################################################
VERSION=0.2.0

MTX_CMD=mtx

# Script help
runhelp() {
    echo ""
    echo "Usage: mtxbatch -f <changer-device> COMMAND SOURCE TARGET [FLAGS]"
    echo ""
    echo "    Prints out a series of mtx commands to perform a range of tape"
    echo "moves, or to swap one range of tapes with another. Will preserve"
    echo "order of tapes, unless requested to reverse their order during the"
    echo "operation. Optionally, you can have this script run the mtx commands"
    echo "rather than just display them."
    echo ""
    echo "ARGUMENTS:"
    echo "  -f <changer-device>"
    echo "      This specifies the tape changer to be passed to the mtx command"
    echo "  COMMAND"
    echo "      This can be either 'move' or 'swap'. With 'move' merely"
    echo "      moving the tapes from the source slots to the target slots, and"
    echo "      'swap' doing the same, but also moving tapes from the target"
    echo "      slots back into the source slots."
    echo "  SOURCE TARGET"
    echo "      Both source and target must be a list of comma separated tape"
    echo "      slot numbers, or slot number ranges."
    echo ""
    echo "FLAGS:"
    echo "  -e | --use-empty"
    echo "      Required when using the swap command. This specifies an empty"
    echo "      tape slot that will be used for swapping tapes between the"
    echo "      source and target slots."
    echo "  --allow-empty"
    echo "      When moving or swapping tapes, preserve any empty slots"
    echo "      included in the command. i.e. The empty slot is \"moved\"."
    echo "  --reverse"
    echo "      Reverses tape order while moving tapes; for the swap"
    echo "      command, it will reverse both source and target tape sets."
    echo "  --reverse-source"
    echo "      Similar to --reverse, but only the source tapes are reversed."
    echo "  --reverse-target"
    echo "      Similar to --reverse, but only the target tapes are reversed."
    echo "      This does nothing if the selected command is move."
    echo "  --run"
    echo "      Attempt to run the mtx commands to perform the given command."
    echo "  -q | --quiet"
    echo "      Do not display the command that will be run. This flag only"
    echo "      works when the --run flag is specified."
    echo "  --skip-run-checks"
    echo "      Do not perform validity checks before attempting to run mtx"
    echo "      commands. This does nothing if --run flag is not set."
    echo ""
}

if [[ -z "$1" || $1 == "-h" || $1 == "--help" || $1 == "help" ]]; then
    runhelp
    exit 0
fi

# Set defaults
default_args() {
    declare -g -A ARGS
    ARGS[CHANGER]=/dev/changer
    ARGS[COMMAND]=
    ARGS[SOURCE]=
    ARGS[TARGET]=
    ARGS[EMPTY_SLOT]=
    ARGS[ALLOW_EMPTY]=0
    ARGS[RUN]=0
    ARGS[SKIP_RUNCHECKS]=0
    ARGS[QUIET]=0
    ARGS[REV_SOURCE]=0
    ARGS[REV_TARGET]=0
}

## Check if mtx command is available
mtx_exists() {
    DUMMY=$( $MTX_CMD -h 2>&1 )
    if [[ $? -eq 127 ]]; then
        return 1
    fi
    return 0
}

# Parse command arguments
parse_args() {
    declare -a NON_FLAGS
    # Parse flag arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
        -f)
            ARGS[CHANGER]="$2"
            shift; shift ;;
        --run)
            ARGS[RUN]=1
            if ! mtx_exists; then
                echo "ERROR! Could not find command to run: $MTX_CMD"
                exit 1
            fi
            shift ;;
        --quiet|-q)
            ARGS[QUIET]=1
            shift ;;
        --use-empty|-e)
            ARGS[EMPTY_SLOT]="$2"
            shift; shift ;;
        --allow-empty)
            ARGS[ALLOW_EMPTY]=1
            shift ;;
        --reverse)
            ARGS[REV_SOURCE]=1
            ARGS[REV_TARGET]=1
            shift ;;
        --reverse-source)
            ARGS[REV_SOURCE]=1
            shift ;;
        --reverse-target)
            ARGS[REV_TARGET]=1
            shift ;;
        --skip-run-checks)
            ARGS[SKIP_RUNCHECKS]=1
            shift ;;
        *)
            NON_FLAGS+=("$1")
            shift ;;
        esac
    done

    # Parse non-flag arguments
    ARGS[COMMAND]=${NON_FLAGS[0]}
    ARGS[SOURCE]=${NON_FLAGS[1]}
    ARGS[TARGET]=${NON_FLAGS[2]}
    # If additional arguments exists, error and exit
    if [[ ! -z ${NON_FLAGS[3]} ]]; then
        echo "ERROR! Unknown extra arguments: ${NON_FLAGS[*]:3}"
        exit 1
    fi
}

# Validate args
check_args() {
    declare -g -a SOURCE_LIST
    declare -g -a TARGET_LIST
    # Parse source and target into arrays of slot numbers
    SOURCE_LIST=($( slotlist2array "${ARGS[SOURCE]}" ))
    TARGET_LIST=($( slotlist2array "${ARGS[TARGET]}" ))
    # Ensure source and target lists have the exact same number of slots
    if [[ ${#SOURCE_LIST[@]} -ne ${#TARGET_LIST[@]} ]]; then
        echo "ERROR! Source and target have differing number of slots. Source: ${#SOURCE_LIST[@]} Target: ${#TARGET_LIST[@]}"
        exit 1
    fi

    # Ensure valid command given
    if ! [[ ${ARGS[COMMAND]} == "swap" || ${ARGS[COMMAND]} == "move" ]]; then
        echo "ERROR! Only valid commands are move and swap. Invalid command given: ${ARGS[COMMAND]}"
        exit 1
    fi

    # If command is swap, ensure a use-empty slot is set (and valid integer)
    if [[ ${ARGS[COMMAND]} == "swap" && ! ${ARGS[EMPTY_SLOT]} =~ ^[0-9]+$ ]]; then
        echo "ERROR! Swap command given, but empty slot is not set to a valid value. See --use-empty flag."
        exit 1
    fi

    # Throw error if quiet is set and run is not set
    if [[ ${ARGS[QUIET]} -eq 1 && ${ARGS[RUN]} -ne 1 ]]; then
        echo "ERROR! With quiet flag set and run flag not set, there is nothing to do."
        exit 1
    fi

    # Populate tape elements array only if it will be needed
    declare -g -A ELEMS
    if [[ ${ARGS[ALLOW_EMPTY]} -eq 1 ]] || [[ ${ARGS[RUN]} -eq 1 && ${ARGS[SKIP_RUNCHECKS]} -ne 1 ]]; then
        # Get list of tapes and slots from changer
        MTXSTAT="$( $MTX_CMD -f "${ARGS[CHANGER]}" status )"
        MTX_CMD_E=$?
        if [[ $MTX_CMD_E -ne 0 ]]; then
            echo "ERROR! Could not query changer status to discover empty tape slots."
            exit 1
        fi
        while read -r L; do
            if [[ "$L" =~ Storage[[:space:]]Element[[:space:]]([0-9]+)[^:]*:(Full|Empty) ]]; then
                ELEMS[${BASH_REMATCH[1]}]=${BASH_REMATCH[2]}
            fi
        done <<< "$MTXSTAT"
    fi

    # Extra checks if run flag is set
    RUN_FAIL=0
    if [[ ${ARGS[RUN]} -eq 1 && ${ARGS[SKIP_RUNCHECKS]} -ne 1 ]]; then
        # Ensure changer device exists
        if ! [[ -c ${ARGS[CHANGER]} ]]; then
            echo "ERROR! Could not find changer-device: ${ARGS[CHANGER]}"
            exit 1
        fi

        # Check to make sure source slots are not empty
        if [[ ${ARGS[ALLOW_EMPTY]} -ne 1 ]]; then
            for N in "${SOURCE_LIST[@]}"; do
                if [[ ${ELEMS[$N]} != "Full" ]]; then
                    echo "ERROR! Source tape slot is missing or empty: $N"
                    RUN_FAIL=1
                fi
            done
        fi

        # Move run checks
        if [[ ${ARGS[COMMAND]} == "move" ]]; then
            # Check to make sure target slots are empty (UNLESS target slot is part of source slot list)
            DIF=($( array_diff "${TARGET_LIST[*]}" "${SOURCE_LIST[*]}" ))
            for N in "${DIF[@]}"; do
                if [[ ${ELEMS[$N]} != "Full" ]]; then
                    echo "ERROR! Target tape slot is missing or not empty: $N"
                    RUN_FAIL=1
                fi
            done
        fi

        # Swap run checks
        if [[ ${ARGS[COMMAND]} == "swap" ]]; then
            # Check to make sure all target slots have tapes in them
            if [[ ${ARGS[ALLOW_EMPTY]} -ne 1 ]]; then
                for N in "${TARGET_LIST[@]}"; do
                    if [[ ${ELEMS[$N]} != "Full" ]]; then
                        echo "ERROR! Target tape slot is missing or empty: $N"
                        RUN_FAIL=1
                    fi
                done
            fi

            # Check to make sure use-empty slot is actually empty
            if [[ ${ELEMS[${ARGS[EMPTY_SLOT]}]} != "Empty" ]]; then
                echo "ERROR! The use-empty slot is missing or not empty."
                RUN_FAIL=1
            fi
        fi
    fi

    if [[ $RUN_FAIL -eq 1 ]]; then
        exit 1
    fi
}

###############################
## Convert a single integer range to list of integers
##  $1 -> An integer range (e.g. 3-8) or a simple integer (e.g. 5)
## Prints the expanded list of ingeters generated from the range, or just prints the simple integer passed
slotrange2array() {
    # If a simple number passed in, then just print it and return
    if [[ "$1" =~ ^[0-9]+$ ]]; then
        echo "$1"
    elif [[ "$1" =~ ^[0-9]+-[0-9]+$ ]]; then
        SPLT=(${1/-/ })
        seq "${SPLT[0]}" 1 "${SPLT[1]}"
    else
        echo "ERROR! Could not parse slot range: $1"
        exit 1
    fi
}

###############################
## Convert a comma separated list of integers and ranges into a single list of integers
##  $1 -> A list of integers and integer ranges, comma separated (e.g. 4,6,9-11)
## Prints a space delimited string of integers in the list, ranges enumerated, results sorted with duplicates removed
slotlist2array() {
    SLOTS=()
    RLIST=(${1//,/ })
    for R in "${RLIST[@]}"; do
        SR2A=$( slotrange2array "$R" )
        SR2A_E=$?
        if [[ $SR2A_E -ne 0 ]]; then
            exit 1
        fi
        SLOTS+=(${SR2A})
    done

    # Remove duplicates and sort ascending
    printf "%d\n" "${SLOTS[@]}" | sort -nu
}

###############################
## Returns the list of space separated values in the first argument that do not exist in the second argument
##  $1 -> A string of space separated values
##  $2 -> A string of space separated values
## Prints a list of space separated values from the first argument where none of those values exist in the second
array_diff() {
    A1=($1)
    A2=($2)
    DIFF=()
    for V1 in "${A1[@]}"; do
        for V2 in "${A2[@]}"; do
            if [[ "$V1" == "$V2" ]]; then
                continue 2
            fi
        done
        DIFF+=($V1)
    done
    echo "${DIFF[*]}"
}

###############################
## Get the first index number in the given space delimited string that matches the given value
##  $1 -> The space delimited string
##  $2 -> The value to match in finding the index
## Prints the index number, or -1 if not found
index_of_value() {
    SEARCH=($1)
    for IDX in "${!SEARCH[@]}"; do
        if [[ "${SEARCH[$IDX]}" == "$2" ]]; then
            echo "$IDX"
            return
        fi
    done
    echo "-1"
}

###############################
## Creates the list of tape tranfer pairs to perform the requested move command
##  $1 -> The source tape slot numbers, space delimited
##  $2 -> The target tape slot numbers, space delimited
## Prints the mtx commands to perform the operation, or runs the mtx command if run flag is set
generate_move_transfers() {
    SRC=($1)
    TGT=($2)

    # Handle reversing the list, if requested
    if [[ ${ARGS[REV_SOURCE]} -eq 1 ]]; then
        SRC=($( reverse_array "${SRC[*]}" ))
    fi

    # Handle cases where source and target slots overlap
    DIF=($( array_diff "${TGT[*]}" "${SRC[*]}" ))
    while [[ "${DIF[*]}" != "${TGT[*]}" && ${#DIF[@]} -gt 0 ]]; do
        # Identify slots and index
        T_SLOT=${DIF[0]}
        IDX=$( index_of_value "${TGT[*]}" "$T_SLOT" )
        S_SLOT=${SRC[$IDX]}
        # Do the mtx command
        run_mtx "$S_SLOT" "$T_SLOT"
        # Remove slots from SRC and TGT
        unset "SRC[$IDX]"
        unset "TGT[$IDX]"
        # Recalculate to check for another overlap
        SRC=(${SRC[*]})
        TGT=(${TGT[*]})
        DIF=($( array_diff "${TGT[*]}" "${SRC[*]}" ))
    done

    # For remaining slots, move them one for one
    for IDX in "${!SRC[@]}"; do
        run_mtx "${SRC[$IDX]}" "${TGT[$IDX]}"
    done
}

###############################
## Creates the list of tape tranfer pairs to perform the requested swap command
##  $1 -> The source tape slot numbers, space delimited
##  $2 -> The target tape slot numbers, space delimited
##  $3 -> The empty tape slot number
## Prints the mtx commands to perform the operation, or runs the mtx command if run flag is set
generate_swap_transfers() {
    SRC=($1)
    TGT=($2)

    # Handle reversing the tape order, if requested
    if [[ ${ARGS[REV_SOURCE]} -eq 1 && ${ARGS[REV_TARGET]} -eq 1 ]]; then
        SRC=($( reverse_array "${SRC[*]}" ))
    fi

    # Perform the swaps
    for IDX in "${!SRC[@]}"; do
        if [[ ${SRC[$IDX]} -eq ${TGT[$IDX]} ]]; then
            continue;
        fi
        run_mtx "${SRC[$IDX]}" "${ARGS[EMPTY_SLOT]}"
        run_mtx "${TGT[$IDX]}" "${SRC[$IDX]}"
        run_mtx "${ARGS[EMPTY_SLOT]}" "${TGT[$IDX]}"
    done

    if [[ ${ARGS[REV_SOURCE]} -eq 1 && ${ARGS[REV_TARGET]} -ne 1 ]]; then
        # Reverse tape order of source tapes (which are now in target slots)
        reverse_in_place "${TGT[*]}"
    fi
    if [[ ${ARGS[REV_TARGET]} -eq 1 && ${ARGS[REG_SOURCE]} -ne 1 ]]; then
        # Reverse tape order of target tapes (which are now in source slots)
        reverse_in_place "${SRC[*]}"
    fi
}

###############################
## Given a space delimited string of slot numbers, reverse the tape order of those tapes
##  $1 -> The source tape slot numbers, space delimited
## Prints the mtx commands to perform the operation, or runs the mtx command if run flag is set
reverse_in_place() {
    SLOTS=($1)
    TOTAL=${#SLOTS[@]}
    HALF=$(( TOTAL / 2 ))
    for I in $( seq 0 $HALF ); do
        FR=${SLOTS[$I]}
        TO=${SLOTS[$TOTAL-$I-1]}
        run_mtx "${FR}" "${ARGS[EMPTY_SLOT]}"
        run_mtx "${TO}" "${FR}"
        run_mtx "${ARGS[EMPTY_SLOT]}" "${TO}"
    done
}

###############################
## Prints (and runs, if flag is set) the mtx command for the given slots
##  $1 -> The slot to move the tape from
##  $2 -> The slot to move the tape to
## Outputs the mtx command first, and then runs the command (if run is set) afterward
run_mtx() {
    # Skip this command if from/to are the same
    if [[ $1 -eq $2 ]]; then
        return
    fi

    # If allowing empty slots to migrate, then skip if from slot is empty
    if [[ ${ARGS[ALLOW_EMPTY]} -eq 1 ]] && [[ ${ELEMS[$1]} == "Empty" ]]; then
        return
    fi

    # Create mtx command string
    RUN_MTX="${MTX_CMD} -f ${ARGS[CHANGER]} transfer $1 $2"
    if [[ ${ARGS[QUIET]} -ne 1 ]]; then
        echo "$RUN_MTX"
    fi

    # Attempt to run command
    if [[ ${ARGS[RUN]} -eq 1 ]]; then
        $RUN_MTX
        MTX_CODE=$?
        if [[ $MTX_CODE -ne 0 ]]; then
            echo "ERROR! Command failed: $RUN_MTX"
            exit 1
        fi
    fi
}

###############################
## Given an array in the form of space delimited string, reverse the values (first to last)
##  $1 -> A string of space delimited values
## Output the reversed array, space delimited
reverse_array() {
    ARR=($1)
    REV=()
    for V in "${ARR[@]}"; do
        REV=($V ${REV[@]})
    done
    echo "${REV[*]}"
}

###############################
## Perform the command given
do_command() {
    # Proceed with commands
    if [[ ${ARGS[COMMAND]} == "move" ]]; then
        generate_move_transfers "${SOURCE_LIST[*]}" "${TARGET_LIST[*]}"
    elif [[ ${ARGS[COMMAND]} == "swap" ]]; then
        generate_swap_transfers "${SOURCE_LIST[*]}" "${TARGET_LIST[*]}"
    fi
}

# Start
default_args
parse_args "$@"
check_args
do_command
